from aiogram import Router, F, types
from aiogram.fsm.context import FSMContext
from loguru import logger
from typing import Dict, Any

from database import Database
from services.points_manager import PointsManager
from services.pro_manager import ProManager
from services.setup_manager import SetupManager
from services.number_manager import NumberManager
from utils.keyboards import back_to_menu_keyboard, main_menu_keyboard, pagination_keyboard
from utils.messages import (
    MSG_NUMBERS_MENU, MSG_NUMBERS_SELECT_COUNTRY, MSG_NUMBERS_NO_NUMBERS,
    MSG_ACCESS_DENIED, MSG_ADMIN_INVALID_INPUT, MSG_ERROR,
    MSG_NUMBER_REQUEST_INITIATED, MSG_NUMBER_REQUEST_CHECK, MSG_NUMBER_CODE_RECEIVED,
    MSG_NUMBER_REQUEST_EXPIRED, MSG_NUMBER_REQUEST_NOT_READY
)
from utils.utils import safe_send_message, safe_edit_message_text

# --- FSM States ---
from aiogram.fsm.state import State, StatesGroup

class NumberStates(StatesGroup):
    """ÿ≠ÿßŸÑÿßÿ™ FSM ŸÑŸÜÿ∏ÿßŸÖ ÿßŸÑÿ£ÿ±ŸÇÿßŸÖ."""
    browsing_numbers = State()
    waiting_for_pro_pattern = State()
    waiting_for_code = State() # ÿ≠ÿßŸÑÿ© ÿ¨ÿØŸäÿØÿ© ŸÑŸÑÿßŸÜÿ™ÿ∏ÿßÿ±

# --- Router Setup ---
router = Router()

# --- Dependency Injection ---
DB: Database
PM: PointsManager
PRM: ProManager
SM: SetupManager
NM: NumberManager

# --- Constants ---
NUMBERS_PER_PAGE = 10

@router.message(F.text == "üåç ÿ£ÿ±ŸÇÿßŸÖ ŸÖÿ¨ÿßŸÜŸäÿ©")
async def numbers_menu_handler(message: types.Message, state: FSMContext, bot):
    """ŸÖÿπÿßŸÑÿ¨ ŸÇÿßÿ¶ŸÖÿ© ÿßŸÑÿ£ÿ±ŸÇÿßŸÖ: ÿπÿ±ÿ∂ ŸÇÿßÿ¶ŸÖÿ© ÿßŸÑÿØŸàŸÑ."""
    user_id = message.from_user.id
    await state.clear()
    
    countries = await NM.get_all_countries()
    
    if not countries:
        await safe_send_message(bot, user_id, "ÿπÿ∞ÿ±ÿßŸãÿå ŸÑÿß ÿ™Ÿàÿ¨ÿØ ÿØŸàŸÑ ŸÖÿ™ÿßÿ≠ÿ© ÿ≠ÿßŸÑŸäÿßŸã.")
        return

    builder = types.InlineKeyboardBuilder()
    
    # ÿ•ÿ∂ÿßŸÅÿ© ÿ≤ÿ± ÿßŸÑÿ®ÿ≠ÿ´ ÿßŸÑŸÖÿ™ŸÇÿØŸÖ ŸÑŸÄ PRO
    is_pro = await PRM.is_pro(user_id)
    if is_pro:
        builder.row(types.InlineKeyboardButton(text="‚≠ê ÿ®ÿ≠ÿ´ ŸÖÿ™ŸÇÿØŸÖ (PRO)", callback_data="numbers_pro_search"))

    # ÿ•ÿ∂ÿßŸÅÿ© ÿßŸÑÿØŸàŸÑ
    for country in countries:
        text = f"{country['flag']} {country['name']} ({country['number_count']})"
        builder.row(types.InlineKeyboardButton(text=text, callback_data=f"numbers_country:{country['id']}:1"))
        
    builder.row(types.InlineKeyboardButton(text="üîô ÿ±ÿ¨Ÿàÿπ ŸÑŸÑŸÇÿßÿ¶ŸÖÿ© ÿßŸÑÿ±ÿ¶Ÿäÿ≥Ÿäÿ©", callback_data="main_menu"))
    
    await safe_send_message(
        bot,
        user_id,
        MSG_NUMBERS_SELECT_COUNTRY,
        reply_markup=builder.as_markup()
    )

@router.callback_query(F.data == "numbers_menu")
async def back_to_numbers_menu(callback: types.CallbackQuery, state: FSMContext, bot):
    """ŸÖÿπÿßŸÑÿ¨ ÿßŸÑÿ±ÿ¨Ÿàÿπ ÿ•ŸÑŸâ ŸÇÿßÿ¶ŸÖÿ© ÿßŸÑÿ£ÿ±ŸÇÿßŸÖ (ÿßŸÑÿØŸàŸÑ)."""
    # ŸÖÿ≠ÿßŸÉÿßÿ© ÿ•ÿ±ÿ≥ÿßŸÑ ÿ±ÿ≥ÿßŸÑÿ© ÿ¨ÿØŸäÿØÿ© ÿ®ÿØŸÑÿßŸã ŸÖŸÜ ÿ™ÿπÿØŸäŸÑ ÿßŸÑÿ±ÿ≥ÿßŸÑÿ© ÿßŸÑÿ≠ÿßŸÑŸäÿ©
    await callback.message.delete()
    await numbers_menu_handler(callback.message, state, bot)
    await callback.answer()

@router.callback_query(F.data.startswith("numbers_country:"))
async def numbers_list_handler(callback: types.CallbackQuery, state: FSMContext, bot):
    """ŸÖÿπÿßŸÑÿ¨ ÿπÿ±ÿ∂ ŸÇÿßÿ¶ŸÖÿ© ÿßŸÑÿ£ÿ±ŸÇÿßŸÖ ŸÑÿØŸàŸÑÿ© ŸÖÿπŸäŸÜÿ©."""
    user_id = callback.from_user.id
    _, country_id_str, page_str = callback.data.split(":")
    country_id = int(country_id_str)
    page = int(page_str)
    
    is_pro = await PRM.is_pro(user_id)
    country = await NM.get_country(country_id)
    
    if not country:
        await callback.answer("ÿßŸÑÿØŸàŸÑÿ© ÿ∫Ÿäÿ± ŸÖŸàÿ¨ŸàÿØÿ©.", show_alert=True)
        return

    numbers = await NM.get_numbers_for_country(country_id, is_pro, page, NUMBERS_PER_PAGE)
    total_count = await NM.get_total_numbers_count(country_id)
    total_pages = (total_count + NUMBERS_PER_PAGE - 1) // NUMBERS_PER_PAGE
    
    if not numbers and page == 1:
        await safe_edit_message_text(
            callback.message,
            MSG_NUMBERS_NO_NUMBERS,
            reply_markup=back_to_menu_keyboard("numbers_menu")
        )
        await callback.answer()
        return

    # 1. ÿ®ŸÜÿßÿ° ÿ±ÿ≥ÿßŸÑÿ© ÿßŸÑÿ£ÿ±ŸÇÿßŸÖ
    message_text = f"üåç **ÿßŸÑÿ£ÿ±ŸÇÿßŸÖ ÿßŸÑŸÖÿ™ÿßÿ≠ÿ© ŸÑŸÄ {country['flag']} {country['name']}** (ÿßŸÑÿµŸÅÿ≠ÿ© {page}/{total_pages})\n\n"
    
    builder = types.InlineKeyboardBuilder()
    
    for number in numbers:
        pro_tag = "‚≠ê" if number['is_premium'] else ""
        text = f"{pro_tag} {number['number']} ({number['platform']})"
        
        # ÿ≤ÿ± ŸÑÿπÿ±ÿ∂ ÿ™ŸÅÿßÿµŸäŸÑ ÿßŸÑÿ±ŸÇŸÖ
        builder.row(types.InlineKeyboardButton(text=text, callback_data=f"numbers_request:{number['id']}"))

    # 2. ÿ®ŸÜÿßÿ° ŸÑŸàÿ≠ÿ© ŸÖŸÅÿßÿ™Ÿäÿ≠ ÿßŸÑÿ™ÿµŸÅÿ≠
    if total_pages > 1:
        # ÿ®ŸÜÿßÿ° ŸÑŸàÿ≠ÿ© ŸÖŸÅÿßÿ™Ÿäÿ≠ ÿßŸÑÿ™ÿµŸÅÿ≠
        pagination_kb = types.InlineKeyboardBuilder()
        if page > 1:
            pagination_kb.add(types.InlineKeyboardButton(text="‚¨ÖÔ∏è ÿßŸÑÿ≥ÿßÿ®ŸÇ", callback_data=f"numbers_country:{country_id}:{page - 1}"))
        
        pagination_kb.add(types.InlineKeyboardButton(text=f"{page}/{total_pages}", callback_data="ignore"))
        
        if page < total_pages:
            pagination_kb.add(types.InlineKeyboardButton(text="ÿßŸÑÿ™ÿßŸÑŸä ‚û°Ô∏è", callback_data=f"numbers_country:{country_id}:{page + 1}"))
            
        builder.attach(pagination_kb)
    
    builder.row(types.InlineKeyboardButton(text="üîô ÿ±ÿ¨Ÿàÿπ ŸÑŸÇÿßÿ¶ŸÖÿ© ÿßŸÑÿØŸàŸÑ", callback_data="numbers_menu"))

    await safe_edit_message_text(
        callback.message,
        message_text,
        reply_markup=builder.as_markup()
    )
    await callback.answer()
    
@router.callback_query(F.data.startswith("numbers_request:"))
async def number_request_handler(callback: types.CallbackQuery, state: FSMContext, bot):
    """ŸÖÿπÿßŸÑÿ¨ ÿ∑ŸÑÿ® ÿßŸÑÿ±ŸÇŸÖ: ÿ®ÿØÿ° ÿπŸÖŸÑŸäÿ© ÿ≠ÿ¨ÿ≤ ÿßŸÑÿ±ŸÇŸÖ."""
    user_id = callback.from_user.id
    number_id = int(callback.data.split(":")[1])
    
    # 1. ÿ®ÿØÿ° ÿπŸÖŸÑŸäÿ© ÿ≠ÿ¨ÿ≤ ÿßŸÑÿ±ŸÇŸÖ
    request_data = await NM.initialize_number_request(user_id, number_id)
    
    if not request_data:
        await callback.answer("‚ùå ÿßŸÑÿ±ŸÇŸÖ ÿ∫Ÿäÿ± ŸÖÿ™ÿßÿ≠ ÿ≠ÿßŸÑŸäÿßŸã ÿ£Ÿà ÿ∫Ÿäÿ± ŸÖŸàÿ¨ŸàÿØ.", show_alert=True)
        return

    # 2. ÿ≠ŸÅÿ∏ ÿ≠ÿßŸÑÿ© ÿßŸÑÿßŸÜÿ™ÿ∏ÿßÿ±
    await state.set_state(NumberStates.waiting_for_code)
    await state.update_data(current_number_id=number_id)
    
    # 3. ÿ•ÿ±ÿ≥ÿßŸÑ ÿ±ÿ≥ÿßŸÑÿ© ÿßŸÑÿßŸÜÿ™ÿ∏ÿßÿ±
    message_text = MSG_NUMBER_REQUEST_INITIATED.format(
        number=request_data['number'],
        platform=request_data['platform'],
        expiry=request_data['expires_at']
    )
    
    keyboard = types.InlineKeyboardMarkup(inline_keyboard=[
        [types.InlineKeyboardButton(text="üîÑ ÿßŸÑÿ™ÿ≠ŸÇŸÇ ŸÖŸÜ ŸàÿµŸàŸÑ ÿßŸÑŸÉŸàÿØ", callback_data=f"numbers_check_code:{number_id}")],
        [types.InlineKeyboardButton(text="‚ùå ÿ•ŸÑÿ∫ÿßÿ° ÿßŸÑÿ∑ŸÑÿ®", callback_data=f"numbers_cancel_request:{number_id}")]
    ])
    
    await safe_edit_message_text(
        callback.message,
        message_text,
        reply_markup=keyboard
    )
    await callback.answer("ÿ™ŸÖ ÿ≠ÿ¨ÿ≤ ÿßŸÑÿ±ŸÇŸÖ ÿ®ŸÜÿ¨ÿßÿ≠. Ÿäÿ±ÿ¨Ÿâ ÿßŸÑÿßŸÜÿ™ÿ∏ÿßÿ± ŸÑŸàÿµŸàŸÑ ÿßŸÑŸÉŸàÿØ.")

@router.callback_query(F.data.startswith("numbers_check_code:"))
async def number_check_code_handler(callback: types.CallbackQuery, state: FSMContext, bot):
    """ŸÖÿπÿßŸÑÿ¨ ÿßŸÑÿ™ÿ≠ŸÇŸÇ ŸÖŸÜ ŸàÿµŸàŸÑ ÿßŸÑŸÉŸàÿØ."""
    user_id = callback.from_user.id
    number_id = int(callback.data.split(":")[1])
    
    # 1. ÿßŸÑÿ™ÿ≠ŸÇŸÇ ŸÖŸÜ ÿßŸÑŸÉŸàÿØ
    code_result = await NM.check_for_code(user_id, number_id)
    
    if code_result == "EXPIRED":
        await state.clear()
        await safe_edit_message_text(
            callback.message,
            MSG_NUMBER_REQUEST_EXPIRED,
            reply_markup=back_to_menu_keyboard("numbers_menu")
        )
        await callback.answer("ÿßŸÜÿ™Ÿáÿ™ ÿµŸÑÿßÿ≠Ÿäÿ© ÿ≠ÿ¨ÿ≤ ÿßŸÑÿ±ŸÇŸÖ.", show_alert=True)
        return
    elif code_result:
        # ÿßŸÑŸÉŸàÿØ ŸàÿµŸÑ ÿ®ŸÜÿ¨ÿßÿ≠
        await state.clear()
        await safe_edit_text(
            callback.message,
            MSG_NUMBER_CODE_RECEIVED.format(code=code_result),
            reply_markup=back_to_menu_keyboard("numbers_menu")
        )
        await callback.answer("ŸàÿµŸÑ ÿßŸÑŸÉŸàÿØ ÿ®ŸÜÿ¨ÿßÿ≠!", show_alert=True)
        return
    else:
        # ÿßŸÑŸÉŸàÿØ ŸÑŸÖ ŸäÿµŸÑ ÿ®ÿπÿØ
        await callback.answer(MSG_NUMBER_REQUEST_NOT_READY, show_alert=True)

@router.callback_query(F.data.startswith("numbers_cancel_request:"))
async def number_cancel_request_handler(callback: types.CallbackQuery, state: FSMContext, bot):
    """ŸÖÿπÿßŸÑÿ¨ ÿ•ŸÑÿ∫ÿßÿ° ÿ∑ŸÑÿ® ÿßŸÑÿ±ŸÇŸÖ."""
    user_id = callback.from_user.id
    number_id = int(callback.data.split(":")[1])
    
    await NM.finalize_number_request(user_id, number_id, "CANCELLED")
    await state.clear()
    
    await safe_edit_message_text(
        callback.message,
        "‚ùå ÿ™ŸÖ ÿ•ŸÑÿ∫ÿßÿ° ÿ∑ŸÑÿ® ÿßŸÑÿ±ŸÇŸÖ ÿ®ŸÜÿ¨ÿßÿ≠. ŸäŸÖŸÉŸÜŸÉ ÿßÿÆÿ™Ÿäÿßÿ± ÿ±ŸÇŸÖ ÿ¢ÿÆÿ±.",
        reply_markup=back_to_menu_keyboard("numbers_menu")
    )
    await callback.answer("ÿ™ŸÖ ÿ•ŸÑÿ∫ÿßÿ° ÿßŸÑÿ∑ŸÑÿ®.")

# --- ŸÖÿπÿßŸÑÿ¨ÿßÿ™ ÿßŸÑÿ®ÿ≠ÿ´ ÿßŸÑŸÖÿ™ŸÇÿØŸÖ (PRO) ---
# (ÿ™ŸÖ ŸÜÿ≥ÿÆŸáÿß ŸÖŸÜ user_handlers.py Ÿàÿ™ÿπÿØŸäŸÑŸáÿß ŸÑÿ™ŸÜÿßÿ≥ÿ® NumberManager)

@router.callback_query(F.data == "numbers_pro_search")
async def pro_search_start(callback: types.CallbackQuery, state: FSMContext, bot):
    """ÿ®ÿØÿ° ÿßŸÑÿ®ÿ≠ÿ´ ÿßŸÑŸÖÿ™ŸÇÿØŸÖ ŸÑŸÄ PRO: ÿπÿ±ÿ∂ ŸÇÿßÿ¶ŸÖÿ© ÿßŸÑÿØŸàŸÑ."""
    user_id = callback.from_user.id
    
    is_pro = await PRM.is_pro(user_id)
    if not is_pro:
        await callback.answer(MSG_ACCESS_DENIED, show_alert=True)
        return

    await state.set_state(NumberStates.waiting_for_pro_pattern)
    
    countries = await NM.get_countries_management_list()
    
    builder = types.InlineKeyboardBuilder()
    for country in countries:
        builder.row(types.InlineKeyboardButton(text=f"{country['flag']} {country['name']}", callback_data=f"pro_search_country:{country['id']}"))
    
    builder.row(types.InlineKeyboardButton(text="üîô ÿ±ÿ¨Ÿàÿπ ŸÑŸÇÿßÿ¶ŸÖÿ© ÿßŸÑÿ£ÿ±ŸÇÿßŸÖ", callback_data="numbers_menu"))
    
    await safe_edit_message_text(
        callback.message,
        "‚≠ê **ÿßŸÑÿ®ÿ≠ÿ´ ÿßŸÑŸÖÿ™ŸÇÿØŸÖ (PRO)**\n\nŸäÿ±ÿ¨Ÿâ ÿßÿÆÿ™Ÿäÿßÿ± ÿßŸÑÿØŸàŸÑÿ© ÿ£ŸàŸÑÿßŸã:",
        reply_markup=builder.as_markup()
    )
    await callback.answer()

@router.callback_query(F.data.startswith("pro_search_country:"))
async def pro_search_get_country(callback: types.CallbackQuery, state: FSMContext, bot):
    """ÿßÿ≥ÿ™ŸÑÿßŸÖ ÿßŸÑÿØŸàŸÑÿ© ŸÑŸÑÿ®ÿ≠ÿ´ ÿßŸÑŸÖÿ™ŸÇÿØŸÖ: ÿ∑ŸÑÿ® ÿßŸÑŸÜŸÖÿ∑."""
    user_id = callback.from_user.id
    country_id = int(callback.data.split(":")[1])
    
    await state.update_data(pro_search_country_id=country_id)
    await state.set_state(NumberStates.waiting_for_pro_pattern)
    
    country = await NM.get_country(country_id)
    
    await safe_edit_message_text(
        callback.message,
        f"üìù **{country['flag']} {country['name']}**\n\nŸäÿ±ÿ¨Ÿâ ÿ•ÿØÿÆÿßŸÑ ŸÜŸÖÿ∑ ÿßŸÑÿ®ÿ≠ÿ´ ÿπŸÜ ÿßŸÑÿ£ÿ±ŸÇÿßŸÖ ÿßŸÑŸÖŸÖŸäÿ≤ÿ© (ŸÖÿ´ÿßŸÑ: `*123*` ÿ£Ÿà `+1*888`):",
        reply_markup=back_to_menu_keyboard("numbers_menu")
    )
    await callback.answer()

@router.message(NumberStates.waiting_for_pro_pattern)
async def pro_search_execute(message: types.Message, state: FSMContext, bot):
    """ÿ™ŸÜŸÅŸäÿ∞ ÿßŸÑÿ®ÿ≠ÿ´ ÿßŸÑŸÖÿ™ŸÇÿØŸÖ."""
    user_id = message.from_user.id
    pattern = message.text.strip()
    
    data = await state.get_data()
    country_id = data.get('pro_search_country_id')
    
    await state.clear()
    
    if not country_id:
        await safe_send_message(bot, user_id, MSG_ERROR)
        return

    results = await NM.search_premium_numbers(country_id, pattern)
    country = await NM.get_country(country_id)
    
    if not results:
        msg = f"‚ùå ŸÑŸÖ Ÿäÿ™ŸÖ ÿßŸÑÿπÿ´Ÿàÿ± ÿπŸÑŸâ ÿ£ÿ±ŸÇÿßŸÖ ŸÖŸÖŸäÿ≤ÿ© ŸÅŸä {country['name']} ÿ™ÿ∑ÿßÿ®ŸÇ ÿßŸÑŸÜŸÖÿ∑ `{pattern}`."
    else:
        msg = f"‚úÖ **ŸÜÿ™ÿßÿ¶ÿ¨ ÿßŸÑÿ®ÿ≠ÿ´ ÿßŸÑŸÖÿ™ŸÇÿØŸÖ ŸÅŸä {country['name']}** ({len(results)} ŸÜÿ™ÿßÿ¶ÿ¨):\n\n"
        for number in results:
            msg += f"‚Ä¢ `{number['number']}` ({number['platform']})\n"
            
    await safe_send_message(
        bot,
        user_id,
        msg,
        reply_markup=main_menu_keyboard(await PRM.is_pro(user_id))
    )
